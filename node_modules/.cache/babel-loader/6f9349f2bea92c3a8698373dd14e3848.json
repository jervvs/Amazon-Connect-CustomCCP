{"ast":null,"code":"var _jsxFileName = \"/Users/jervchan/Downloads/Amazon-Connect-CustomCCP/src/components/logging.js\";\nimport React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.myCPP = window.myCPP || {};\nconst lily = window.connect;\n\nclass Logging extends Component {\n  componentDidMount() {\n    lily.contact(this.subscribeToContactEvents);\n    lily.agent(this.subscribeToAgentEvents);\n  }\n\n  subscribeToContactEvents(contact) {\n    this.logInfoMsg(\"Subscribing to events for contact\");\n\n    if (contact.getActiveInitialConnection() && contact.getActiveInitialConnection().getEndpoint()) {\n      this.logInfoMsg(\"New contact is from \" + contact.getActiveInitialConnection().getEndpoint().phoneNumber);\n    } else {\n      this.logInfoMsg(\"This is an existing contact for this agent\");\n    }\n\n    this.logInfoMsg(\"Contact is from queue \" + contact.getQueue().name);\n    this.logInfoMsg(\"Contact attributes are \" + JSON.stringify(contact.getAttributes()));\n    contact.onIncoming(this.handleContactIncoming);\n    contact.onAccepted(this.handleContactAccepted);\n    contact.onConnected(this.handleContactConnected);\n    contact.onEnded(this.handleContactEnded);\n  }\n\n  handleContactIncoming(contact) {\n    if (contact) {\n      this.logInfoEvent(\"[contact.onIncoming] Contact is incoming. Contact state is \" + contact.getStatus().type);\n    } else {\n      this.logInfoEvent(\"[contact.onIncoming] Contact is incoming. Null contact passed to event handler\");\n    }\n  }\n\n  handleContactAccepted(contact) {\n    if (contact) {\n      this.logInfoEvent(\"[contact.onAccepted] Contact accepted by agent. Contact state is \" + contact.getStatus().type);\n    } else {\n      this.logInfoEvent(\"[contact.onAccepted] Contact accepted by agent. Null contact passed to event handler\");\n    }\n  }\n\n  handleContactConnected(contact) {\n    if (contact) {\n      this.logInfoEvent(\"[contact.onConnected] Contact connected to agent. Contact state is \" + contact.getStatus().type);\n    } else {\n      this.logInfoEvent(\"[contact.onConnected] Contact connected to agent. Null contact passed to event handler\");\n    }\n  }\n\n  handleContactEnded(contact) {\n    if (contact) {\n      this.logInfoEvent(\"[contact.onEnded] Contact has ended. Contact state is \" + contact.getStatus().type);\n    } else {\n      this.logInfoEvent(\"[contact.onEnded] Contact has ended. Null contact passed to event handler\");\n    }\n  }\n\n  subscribeToAgentEvents(agent) {\n    this.logInfoMsg(\"Subscribing to events for agent \" + agent.getName());\n    this.logInfoMsg(\"Agent is currently in status of \" + agent.getStatus().name);\n    agent.onRefresh(this.handleAgentRefresh);\n    agent.onRoutable(this.handleAgentRoutable);\n    agent.onNotRoutable(this.handleAgentNotRoutable);\n    agent.onOffline(this.handleAgentOffline);\n  }\n\n  handleAgentRefresh(agent) {\n    this.logInfoEvent(\"[agent.onRefresh] Agent data refreshed. Agent status is \" + agent.getStatus().name);\n  }\n\n  handleAgentRoutable(agent) {\n    this.logInfoEvent(\"[agent.onRoutable] Agent is routable. Agent status is \" + agent.getStatus().name);\n  }\n\n  handleAgentNotRoutable(agent) {\n    this.logInfoEvent(\"[agent.onNotRoutable] Agent is online, but not routable. Agent status is \" + agent.getStatus().name);\n  }\n\n  handleAgentOffline(agent) {\n    this.logInfoEvent(\"[agent.onOffline] Agent is offline. Agent status is \" + agent.getStatus().name);\n  }\n\n  logMsgToScreen(msg) {\n    document.getElementById('logMsgs').innerHTML = '<div>' + new Date().toLocaleTimeString() + ' ' + msg + '</div>' + document.getElementById('logMsgs').innerHTML;\n  }\n\n  logEventToScreen(msg) {\n    document.getElementById('eventMsgs').innerHTML = '<div>' + new Date().toLocaleTimeString() + ' ' + msg + '</div>' + document.getElementById('eventMsgs').innerHTML;\n  }\n\n  logInfoMsg(msg) {\n    lily.getLog().info(msg);\n    this.logMsgToScreen(msg);\n  }\n\n  logInfoEvent(eventMsg) {\n    lily.getLog().info(eventMsg);\n    this.logEventToScreen(eventMsg);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Log Messages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"logMsgs\",\n              style: {\n                height: 465\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Event Messages\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"eventMsgs\",\n              style: {\n                height: 465\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Logging;","map":{"version":3,"sources":["/Users/jervchan/Downloads/Amazon-Connect-CustomCCP/src/components/logging.js"],"names":["React","Component","Container","Row","Col","window","myCPP","lily","connect","Logging","componentDidMount","contact","subscribeToContactEvents","agent","subscribeToAgentEvents","logInfoMsg","getActiveInitialConnection","getEndpoint","phoneNumber","getQueue","name","JSON","stringify","getAttributes","onIncoming","handleContactIncoming","onAccepted","handleContactAccepted","onConnected","handleContactConnected","onEnded","handleContactEnded","logInfoEvent","getStatus","type","getName","onRefresh","handleAgentRefresh","onRoutable","handleAgentRoutable","onNotRoutable","handleAgentNotRoutable","onOffline","handleAgentOffline","logMsgToScreen","msg","document","getElementById","innerHTML","Date","toLocaleTimeString","logEventToScreen","getLog","info","eventMsg","render","height"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nwindow.myCPP = window.myCPP || {};\nconst lily = window.connect;\n\nclass Logging extends Component{\n    componentDidMount(){\n        lily.contact(this.subscribeToContactEvents);\n        lily.agent(this.subscribeToAgentEvents);\n    }\n\n    subscribeToContactEvents(contact) {\n        this.logInfoMsg(\"Subscribing to events for contact\");\n        if (contact.getActiveInitialConnection() \n            && contact.getActiveInitialConnection().getEndpoint()) {\n            this.logInfoMsg(\"New contact is from \" + contact.getActiveInitialConnection().getEndpoint().phoneNumber);\n        } else {\n            this.logInfoMsg(\"This is an existing contact for this agent\");\n        }\n        this.logInfoMsg(\"Contact is from queue \" + contact.getQueue().name);\n        this.logInfoMsg(\"Contact attributes are \" + JSON.stringify(contact.getAttributes()));\n        contact.onIncoming(this.handleContactIncoming);\n        contact.onAccepted(this.handleContactAccepted);\n        contact.onConnected(this.handleContactConnected);\n        contact.onEnded(this.handleContactEnded);\n    }\n\n    handleContactIncoming(contact) {\n        if (contact) {\n            this.logInfoEvent(\"[contact.onIncoming] Contact is incoming. Contact state is \" + contact.getStatus().type);\n        } else {\n            this.logInfoEvent(\"[contact.onIncoming] Contact is incoming. Null contact passed to event handler\");\n        }\n    }\n\n    handleContactAccepted(contact) {\n        if (contact) {\n            this.logInfoEvent(\"[contact.onAccepted] Contact accepted by agent. Contact state is \" + contact.getStatus().type);\n        } else {\n            this.logInfoEvent(\"[contact.onAccepted] Contact accepted by agent. Null contact passed to event handler\");\n        }\n    }\n\n    handleContactConnected(contact) {\n        if (contact) {\n            this.logInfoEvent(\"[contact.onConnected] Contact connected to agent. Contact state is \" + contact.getStatus().type);\n        } else {\n            this.logInfoEvent(\"[contact.onConnected] Contact connected to agent. Null contact passed to event handler\");\n        }\n    }\n\n    handleContactEnded(contact) {\n        if (contact) {\n            this.logInfoEvent(\"[contact.onEnded] Contact has ended. Contact state is \" + contact.getStatus().type);\n        } else {\n            this.logInfoEvent(\"[contact.onEnded] Contact has ended. Null contact passed to event handler\");\n        }\n    }\n\n    subscribeToAgentEvents(agent) {\n        this.logInfoMsg(\"Subscribing to events for agent \" + agent.getName());\n        this.logInfoMsg(\"Agent is currently in status of \" + agent.getStatus().name);\n        agent.onRefresh(this.handleAgentRefresh);\n        agent.onRoutable(this.handleAgentRoutable);\n        agent.onNotRoutable(this.handleAgentNotRoutable);\n        agent.onOffline(this.handleAgentOffline);\n    }\n\n    handleAgentRefresh(agent) {\n        this.logInfoEvent(\"[agent.onRefresh] Agent data refreshed. Agent status is \" + agent.getStatus().name);\n    }\n\n    handleAgentRoutable(agent) {\n        this.logInfoEvent(\"[agent.onRoutable] Agent is routable. Agent status is \" + agent.getStatus().name);\n    }\n\n    handleAgentNotRoutable(agent) {\n        this.logInfoEvent(\"[agent.onNotRoutable] Agent is online, but not routable. Agent status is \" + agent.getStatus().name);\n    }\n\n    handleAgentOffline(agent) {\n        this.logInfoEvent(\"[agent.onOffline] Agent is offline. Agent status is \" + agent.getStatus().name);\n    }\n\n    logMsgToScreen(msg) {\n        document.getElementById('logMsgs').innerHTML = '<div>' + new Date().toLocaleTimeString() + ' ' + msg + '</div>' + document.getElementById('logMsgs').innerHTML;\n    }\n\n    logEventToScreen(msg) {\n        document.getElementById('eventMsgs').innerHTML = '<div>' + new Date().toLocaleTimeString() + ' ' + msg + '</div>' + document.getElementById('eventMsgs').innerHTML;\n    }\n\n    logInfoMsg(msg) {\n        lily.getLog().info(msg);\n        this.logMsgToScreen(msg);\n    }\n\n    logInfoEvent(eventMsg) {\n        lily.getLog().info(eventMsg);\n        this.logEventToScreen(eventMsg);\n    }\n\n    render(){\n        return(\n            <Container>\n                <Row>\n                    <Col>\n                        <div>\n                            <h2>Log Messages</h2>\n                            <div id=\"logMsgs\" style={{height:465}}></div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <div>\n                            <h2>Event Messages</h2>\n                            <div id=\"eventMsgs\" style={{height:465}}></div>\n                        </div>\n                    </Col>\n                </Row>\n\n            </Container>\n        );\n    }\n}\n\nexport default Logging"]},"metadata":{},"sourceType":"module"}